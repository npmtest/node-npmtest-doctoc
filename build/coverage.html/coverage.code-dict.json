{"/home/travis/build/npmtest/node-npmtest-doctoc/test.js":"/* istanbul instrument in package npmtest_doctoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-doctoc/lib.npmtest_doctoc.js":"/* istanbul instrument in package npmtest_doctoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_doctoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_doctoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-doctoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-doctoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_doctoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_doctoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_doctoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_doctoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_doctoc.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_doctoc.__dirname +\n                    '/lib.npmtest_doctoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-doctoc/node_modules/doctoc/doctoc.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar path      =  require('path')\n  , fs        =  require('fs')\n  , minimist  =  require('minimist')\n  , file      =  require('./lib/file')\n  , transform =  require('./lib/transform')\n  , files;\n\nfunction cleanPath(path) {\n  var homeExpanded = (path.indexOf('~') === 0) ? process.env.HOME + path.substr(1) : path;\n\n  // Escape all spaces\n  return homeExpanded.replace(/\\s/g, '\\\\ ');\n}\n\nfunction transformAndSave(files, mode, maxHeaderLevel, title, notitle, entryPrefix, stdOut) {\n  console.log('\\n==================\\n');\n\n  var transformed = files\n    .map(function (x) {\n      var content = fs.readFileSync(x.path, 'utf8')\n        , result = transform(content, mode, maxHeaderLevel, title, notitle, entryPrefix);\n      result.path = x.path;\n      return result;\n    });\n  var changed = transformed.filter(function (x) { return x.transformed; })\n    , unchanged = transformed.filter(function (x) { return !x.transformed; })\n    , toc = transformed.filter(function (x) { return x.toc; })\n\n  if (stdOut) {\n    toc.forEach(function (x) {\n      console.log(x.toc)\n    })\n  }\n\n  unchanged.forEach(function (x) {\n    console.log('\"%s\" is up to date', x.path);\n  });\n\n  changed.forEach(function (x) { \n    if (stdOut) {\n      console.log('==================\\n\\n\"%s\" should be updated', x.path)\n    } else {\n      console.log('\"%s\" will be updated', x.path);\n      fs.writeFileSync(x.path, x.data, 'utf8');\n    }\n  });\n}\n\nfunction printUsageAndExit(isErr) {\n\n  var outputFunc = isErr ? console.error : console.info;\n\n  outputFunc('Usage: doctoc [mode] [--entryprefix prefix] [--notitle | --title title] [--maxlevel level] <path> (where path is some path to a directory (e.g., .) or a file (e.g., README.md))');\n  outputFunc('\\nAvailable modes are:');\n  for (var key in modes) {\n    outputFunc('  --%s\\t%s', key, modes[key]);\n  }\n  outputFunc('Defaults to \\'' + mode + '\\'.');\n\n  process.exit(isErr ? 2 : 0);\n}\n\nvar modes = {\n    bitbucket : 'bitbucket.org'\n  , nodejs    : 'nodejs.org'\n  , github    : 'github.com'\n  , gitlab    : 'gitlab.com'\n  , ghost     : 'ghost.org'\n}\n\nvar mode = modes['github'];\n\nvar argv = minimist(process.argv.slice(2)\n    , { boolean: [ 'h', 'help', 'T', 'notitle', 's', 'stdout'].concat(Object.keys(modes))\n    , string: [ 'title', 't', 'maxlevel', 'm', 'entryprefix' ]\n    , unknown: function(a) { return (a[0] == '-' ? (console.error('Unknown option(s): ' + a), printUsageAndExit(true)) : true); }\n    });\n\nif (argv.h || argv.help) {\n  printUsageAndExit();\n}\n\nfor (var key in modes) {\n  if (argv[key]) {\n    mode = modes[key];\n  }\n}\n\nvar title = argv.t || argv.title;\nvar notitle = argv.T || argv.notitle;\nvar entryPrefix = argv.entryprefix || '-';\nvar stdOut = argv.s || argv.stdout\n\nvar maxHeaderLevel = argv.m || argv.maxlevel;\nif (maxHeaderLevel && isNaN(maxHeaderLevel) || maxHeaderLevel < 0) { console.error('Max. heading level specified is not a positive number: ' + maxHeaderLevel), printUsageAndExit(true); }\n\nfor (var i = 0; i < argv._.length; i++) {\n  var target = cleanPath(argv._[i])\n    , stat = fs.statSync(target)\n\n  if (stat.isDirectory()) {\n    console.log ('\\nDocToccing \"%s\" and its sub directories for %s.', target, mode);\n    files = file.findMarkdownFiles(target);\n  } else {\n    console.log ('\\nDocToccing single file \"%s\" for %s.', target, mode);\n    files = [{ path: target }];\n  }\n\n  transformAndSave(files, mode, maxHeaderLevel, title, notitle, entryPrefix, stdOut);\n\n  console.log('\\nEverything is OK.');\n}\n","/home/travis/build/npmtest/node-npmtest-doctoc/node_modules/doctoc/lib/file.js":"var path  =  require('path')\n ,  fs  =  require('fs')\n ,  _   =  require('underscore');\n\nvar markdownExts = ['.md', '.markdown'];\nvar ignoredDirs  = ['.', '..', '.git', 'node_modules'];\n\nfunction separateFilesAndDirs(fileInfos) {\n  return {\n    directories :  _(fileInfos).filter(function (x) {\n      return x.isDirectory() && !_(ignoredDirs).include(x.name);\n    }),\n    markdownFiles :  _(fileInfos).filter(function (x) { \n      return x.isFile() && _(markdownExts).include(path.extname(x.name)); \n    })\n  };\n}\n\nfunction findRec(currentPath) {\n  function getStat (entry) {\n    var target = path.join(currentPath, entry),\n      stat = fs.statSync(target);\n\n    return  _(stat).extend({ \n      name: entry,\n      path: target\n    });\n  }\n  \n  function process (fileInfos) {\n    var res = separateFilesAndDirs(fileInfos);\n    var tgts = _(res.directories).pluck('path');\n\n    if (res.markdownFiles.length > 0) \n      console.log('\\nFound %s in \"%s\"', _(res.markdownFiles).pluck('name').join(', '), currentPath);\n    else \n      console.log('\\nFound nothing in \"%s\"', currentPath);\n\n    return { \n      markdownFiles :  res.markdownFiles,\n      subdirs     :  tgts\n    };\n  }\n\n  var stats                  =  _(fs.readdirSync(currentPath)).map(getStat)\n    , res                    =  process(stats)\n    , markdownsInSubdirs     =  _(res.subdirs).map(findRec)\n    , allMarkdownsHereAndSub =  res.markdownFiles.concat(markdownsInSubdirs);\n\n  return _(allMarkdownsHereAndSub).flatten();\n}\n\n// Finds all markdown files in given directory and its sub-directories\n// @param {String  } dir - the absolute directory to search in \nexports.findMarkdownFiles = function(dir) {\n  return findRec(dir);\n};\n\n/* Example:\nconsole.log('\\033[2J'); // clear console\n\nvar res = findRec(path.join(__dirname, '..', 'samples'));\nconsole.log('Result: ', res);\n*/\n","/home/travis/build/npmtest/node-npmtest-doctoc/node_modules/doctoc/lib/transform.js":"'use strict';\n\nvar _             = require('underscore')\n  , anchor        = require('anchor-markdown-header')\n  , updateSection = require('update-section')\n  , getHtmlHeaders = require('./get-html-headers')\n  , md            = require('markdown-to-ast');\n\nvar start = '<!-- START doctoc generated TOC please keep comment here to allow auto update -->\\n' +\n            '<!-- DON\\'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->'\n  , end   = '<!-- END doctoc generated TOC please keep comment here to allow auto update -->'\n\nfunction matchesStart(line) {\n  return (/<!-- START doctoc /).test(line);\n}\n\nfunction matchesEnd(line) {\n  return (/<!-- END doctoc /).test(line);\n}\n\nfunction notNull(x) { return  x !== null; }\n\nfunction addAnchor(mode, header) {\n  header.anchor = anchor(header.name, mode, header.instance);\n  return header;\n}\n\nfunction isString(y) {\n  return typeof y === 'string';\n}\n\n\nfunction getMarkdownHeaders (lines, maxHeaderLevel) {\n  function extractText (header) {\n    return header.children\n      .map(function (x) {\n        if (x.type === md.Syntax.Link) {\n          return extractText(x);\n        }\n        else if (x.type === md.Syntax.Image) {\n          // Images (at least on GitHub, untested elsewhere) are given a hyphen\n          // in the slug. We can achieve this behavior by adding an '*' to the\n          // TOC entry. Think of it as a \"magic char\" that represents the iamge.\n          return '*';\n        }\n        else {\n          return x.raw;\n        }\n      })\n      .join('')\n  }\n\n  return md.parse(lines.join('\\n')).children\n    .filter(function (x) {\n      return x.type === md.Syntax.Header;\n    })\n    .map(function (x) {\n      return !maxHeaderLevel || x.depth <= maxHeaderLevel\n        ? { rank :  x.depth\n          , name :  extractText(x)\n          , line :  x.loc.start.line\n          }\n        : null;\n    })\n    .filter(notNull)\n}\n\nfunction countHeaders (headers) {\n  var instances = {};\n\n  for (var i = 0; i < headers.length; i++) {\n    var header = headers[i];\n    var name = header.name;\n\n    if (Object.prototype.hasOwnProperty.call(instances, name)) {\n      // `instances.hasOwnProperty(name)` fails when there’s an instance named \"hasOwnProperty\".\n      instances[name]++;\n    } else {\n      instances[name] = 0;\n    }\n\n    header.instance = instances[name];\n  }\n\n  return headers;\n}\n\nfunction getLinesToToc (lines, currentToc, info) {\n  if (!currentToc) return lines;\n\n  var tocableStart = 0;\n\n  // when updating an existing toc, we only take the headers into account\n  // that are below the existing toc\n  if (info.hasEnd) tocableStart = info.endIdx + 1;\n\n  return lines.slice(tocableStart);\n}\n\n// Use document context as well as command line args to infer the title\nfunction determineTitle(title, notitle, lines, info) {\n  var defaultTitle = '**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*';\n\n  if (notitle) return '';\n  if (title) return title;\n  return info.hasStart ? lines[info.startIdx + 2] : defaultTitle;\n}\n\nexports = module.exports = function transform(content, mode, maxHeaderLevel, title, notitle, entryPrefix) {\n  mode = mode || 'github.com';\n  entryPrefix = entryPrefix || '-';\n\n  // only limit *HTML* headings by default\n  var maxHeaderLevelHtml = maxHeaderLevel || 4;\n\n  var lines = content.split('\\n')\n    , info = updateSection.parse(lines, matchesStart, matchesEnd)\n\n  var inferredTitle = determineTitle(title, notitle, lines, info);\n\n  var currentToc = info.hasStart && lines.slice(info.startIdx, info.endIdx + 1).join('\\n')\n    , linesToToc = getLinesToToc(lines, currentToc, info);\n\n  var headers = getMarkdownHeaders(linesToToc, maxHeaderLevel)\n    .concat(getHtmlHeaders(linesToToc, maxHeaderLevelHtml))\n\n  headers.sort(function (a, b) {\n    return a.line - b.line;\n  });\n\n  var allHeaders    =  countHeaders(headers)\n    , lowestRank    =  _(allHeaders).chain().pluck('rank').min().value()\n    , linkedHeaders =  _(allHeaders).map(addAnchor.bind(null, mode));\n\n  if (linkedHeaders.length === 0) return { transformed: false };\n\n  // 4 spaces required for proper indention on Bitbucket\n  var indentation = (mode === 'bitbucket.org' || mode === 'gitlab.com') ? '    ' : '  ';\n\n  var toc =\n      inferredTitle\n    + '\\n\\n'\n    + linkedHeaders\n        .map(function (x) {\n          var indent = _(_.range(x.rank - lowestRank))\n            .reduce(function (acc, x) { return acc + indentation; }, '');\n\n          return indent + entryPrefix + ' ' + x.anchor;\n        })\n        .join('\\n')\n    + '\\n';\n\n  var wrappedToc =  start + '\\n' + toc + '\\n' + end;\n\n  if (currentToc === toc) return { transformed: false };\n\n  var data = updateSection(lines.join('\\n'), wrappedToc, matchesStart, matchesEnd, true);\n  return { transformed : true, data : data, toc: toc, wrappedToc: wrappedToc };\n};\n\nexports.start = start;\nexports.end = end;\n","/home/travis/build/npmtest/node-npmtest-doctoc/node_modules/doctoc/lib/get-html-headers.js":"'use strict';\n\nvar htmlparser = require('htmlparser2')\n  , md         = require('markdown-to-ast');\n\nfunction addLinenos(lines, headers) {\n  var current = 0, line;\n\n  return headers.map(function (x) {\n    for (var lineno = current; lineno < lines.length; lineno++) {\n      line = lines[lineno];\n      if (new RegExp(x.text[0]).test(line)) {\n        current = lineno;\n        x.line = lineno;\n        x.name = x.text.join('');\n        return x\n      }\n    }\n\n    // in case we didn't find a matching line, which is odd,\n    // we'll have to assume it's right on the next line\n    x.line = ++current;\n    x.name = x.text.join('');\n    return x\n  })\n}\n\nfunction rankify(headers, max) {\n  return headers\n    .map(function (x) {\n      x.rank = parseInt(x.tag.slice(1), 10);\n      return x;\n    })\n    .filter(function (x) {\n      return x.rank <= max;\n    })\n}\n\nvar go = module.exports = function (lines, maxHeaderLevel) {\n  var source = md.parse(lines.join('\\n'))\n    .children\n    .filter(function(node) {\n      return node.type === md.Syntax.HtmlBlock || node.type === md.Syntax.Html;\n    })\n    .map(function (node) {\n      return node.raw;\n    })\n    .join('\\n');\n\n  //var headers = [], grabbing = null, text = [];\n  var headers = [], grabbing = [], text = [];\n\n  var parser = new htmlparser.Parser({\n    onopentag: function (name, attr) {\n      // Short circuit if we're already inside a pre\n      if (grabbing[grabbing.length - 1] === 'pre') return;\n\n      if (name === 'pre' || (/h\\d/).test(name)) {\n        grabbing.push(name);\n      }\n    },\n    ontext: function (text_) {\n      // Explicitly skip pre tags, and implicitly skip all others\n      if (grabbing.length === 0 ||\n          grabbing[grabbing.length - 1] === 'pre') return;\n\n      text.push(text_);\n    },\n    onclosetag: function (name) {\n      if (grabbing.length === 0) return;\n      if (grabbing[grabbing.length - 1] === name) {\n        var tag = grabbing.pop();\n        headers.push({ text: text, tag: tag });\n        text = [];\n      }\n    }\n  },\n  { decodeEntities: true })\n\n  parser.write(source);\n  parser.end();\n\n  headers = addLinenos(lines, headers)\n  // consider anything past h4 to small to warrant a link, may be made configurable in the future\n  headers = rankify(headers, maxHeaderLevel);\n  return headers;\n}\n"}